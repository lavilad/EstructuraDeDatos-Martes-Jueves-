#include <stdio.h>
#include <stdlib.h>

// Definición de la estructura del nodo del árbol binario
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Función para crear un nuevo nodo del árbol binario
struct TreeNode* newNode(int data) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Función para insertar un nuevo nodo en el árbol binario
struct TreeNode* insert(struct TreeNode* node, int data) {
    if (node == NULL)
        return newNode(data);
    if (data < node->data)
        node->left = insert(node->left, data);
    else if (data > node->data)
        node->right = insert(node->right, data);
    return node;
}

// Función para encontrar el nodo más pequeño que sea mayor que el nodo dado
struct TreeNode* findSuccessor(struct TreeNode* root, struct TreeNode* target) {
    if (target->right != NULL) {
       
        struct TreeNode* current = target->right;
        while (current->left != NULL)
            current = current->left;
        return current;
    } else {
      r
        struct TreeNode* successor = NULL;
        struct TreeNode* ancestor = root;
        while (ancestor != target) {
            if (target->data < ancestor->data) {
                successor = ancestor;
                ancestor = ancestor->left;
            } else {
                ancestor = ancestor->right;
            }
        }
        return successor;
    }
}

// Función para imprimir el árbol en orden
void inorderTraversal(struct TreeNode* node) {
    if (node != NULL) {
        inorderTraversal(node->left);
        printf("%d ", node->data);
        inorderTraversal(node->right);
    }
}

int main() {
    struct TreeNode* root = NULL;
    root = insert(root, 20);
    insert(root, 10);
    insert(root, 30);
    insert(root, 5);
    insert(root, 15);
    insert(root, 25);
    insert(root, 35);

    printf("Inorder traversal of the binary tree: ");
    inorderTraversal(root);
    printf("\n");

    struct TreeNode* target = root->right->right; 
    struct TreeNode* successor = findSuccessor(root, target);

    if (successor != NULL)
        printf("El sucesor de %d es %d.\n", target->data, successor->data);
    else
        printf("No hay sucesor para %d.\n", target->data);

    return 0;
}
