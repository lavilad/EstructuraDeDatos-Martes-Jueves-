#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int key;
    struct Node *left;
    struct Node *right;
} Node;


Node *newNode(int key) {
    Node *node = (Node *)malloc(sizeof(Node));
    node->key = key;
    node->left = node->right = NULL;
    return node;
}


Node *insert(Node *root, int key) {
    if (root == NULL) {
        return newNode(key);
    }
    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }
    return root;
}


Node *invertTree(Node *root) {
    if (root == NULL) {
        return NULL;
    }
   
    Node *temp = root->left;
    root->left = root->right;
    root->right = temp;
   
    invertTree(root->left);
    invertTree(root->right);
    return root;
}


void inorder(Node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

int main(void) {
    Node *root = NULL;
    int keys[] = {80, 70, 20, 60, 30, 50, 2, 100};
    for (int i = 0; i < sizeof(keys) / sizeof(keys[0]); i++) {
        root = insert(root, keys[i]);
    }

    printf("Inorder traversal of the tree: ");
    inorder(root);
    printf("\n");

   
    root = invertTree(root);

    printf("Inverted inorder traversal of the tree: ");
    inorder(root);
    printf("\n");

    return 0;
}
